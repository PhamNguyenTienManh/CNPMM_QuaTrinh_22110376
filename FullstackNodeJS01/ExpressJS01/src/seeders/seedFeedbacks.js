const mongoose = require("mongoose");
const User = require("../models/user");
const Product = require("../models/product");
const Feedback = require("../models/feedback");

const MONGO_URI = "mongodb://localhost:27017/fullstack01";

const seedFeedbacks = async () => {
  try {
    await mongoose.connect(MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });

    await Feedback.deleteMany({});
    console.log("üßπ X√≥a d·ªØ li·ªáu Feedback c≈© th√†nh c√¥ng!");

    const users = await User.find({});
    const products = await Product.find({});

    if (!users.length || !products.length) {
      console.log("‚ö†Ô∏è C·∫ßn seed Users v√† Products tr∆∞·ªõc khi seed Feedbacks!");
      process.exit(1);
    }

    const comments = [
      "S·∫£n ph·∫©m r·∫•t ƒë·∫πp v√† ch·∫•t l∆∞·ª£ng!",
      "H∆°i ch·∫≠t m·ªôt ch√∫t nh∆∞ng v·∫´n ·ªïn.",
      "M√†u s·∫Øc gi·ªëng h√¨nh, giao h√†ng nhanh.",
      "Gi√° h∆°i cao nh∆∞ng ƒë√°ng ti·ªÅn.",
      "T√¥i s·∫Ω mua l·∫°i l·∫ßn n·ªØa!",
    ];

    let feedbackData = [];

    for (const product of products) {
      // M·ªói product c√≥ t·ª´ 1‚Äì3 feedback
      const feedbackCount = Math.floor(Math.random() * 3) + 1;

      for (let i = 0; i < feedbackCount; i++) {
        const randomUser = users[Math.floor(Math.random() * users.length)];
        const randomRating = Math.floor(Math.random() * 5) + 1;
        const randomComment =
          comments[Math.floor(Math.random() * comments.length)];

        feedbackData.push({
          productId: product._id,
          userId: randomUser._id,
          rating: randomRating,
          comment: randomComment,
        });
      }
    }

    await Feedback.insertMany(feedbackData);
    console.log("‚úÖ Seed Feedbacks th√†nh c√¥ng!");
    process.exit(0);
  } catch (err) {
    console.error("‚ùå L·ªói seed Feedbacks:", err);
    process.exit(1);
  }
};

seedFeedbacks();
